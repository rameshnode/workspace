package ramesh.samples.recursive;

public class NQueens {

	public static void main(String args[]) {

		int N = 4;
		boolean board[][] = new boolean[N][N];

		showBoard(board);

		board[0][3] = true;

		placeQueen(0, 4, board);

		System.out.println(" b placeNQueen ");
		
		placeNQueen(board);
		
		System.out.println(" a placeNQueen ");
		
	}

	public static void placeQueen(int x, int y, boolean[][] board) {
		System.out.println("PLACE QUEEN ");
		System.out.println(board[0][3]);
		isSafe(x, y, board);

	}

	public static void placeNQueen(boolean[][] board) {

		int n = 4;
		while (n <= 0) {
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board.length; j++) {
					if (isSafe(i, j, board)) {
						board[i][j] = true;
						n--;
						break;
						
					} 
				}
			}
		}
	}

	public static boolean isSafe(int row, int col, boolean[][] board) {
		// if any row has true value in the board
		for (int i = 0; i < board.length; i++) {
			System.out.println(i + " board[" + row + "][" + i + "] "
					+ board[row][i]);
			if (board[row][i] && i != col) {
				System.out.println("IN SAME ROW !! NOT SAFE");
				return false;
			}
		}
		return true;

	}

	public static void showBoard(boolean[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board.length; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}

	}
}
